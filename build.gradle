buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '6.0.27'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

version = project.mod_version
group = 'com.adonis'// http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'creategeography-1.20'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'

    runs {
        client {
            jvmArgs '-Dmixin.debug.export=true'
            jvmArgs '-Dforge.disableAccessTransformer=true'
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "creategeography" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'creategeography', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/platform-shared/resources/'), '--existing-mod', 'create'

            mods {
                creategeography {
                    source sourceSets.main
                }
            }
        }
    }

    //runs.each { run -> run.taskName = project.name + (run.taskName.startsWith("run") ? run.taskName.substring(3) : run.taskName) }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets {
    main {
        java {
            srcDir "src/platform-shared/java"
            //if(!useLib)exclude "com/tom/createores/rei/**"
        }
        resources {
            srcDir "src/platform-shared/resources"
        }
    }
}

repositories {

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven { url "https://maven.covers1624.net" }
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url = "http://localhost:8000"
        allowInsecureProtocol true
        content {
            includeGroup "local"
        }
    }
    maven {
        name = "JourneyMap (Public)"
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    // Added for Mekanism
    maven { url 'https://modmaven.dev/' }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.20.1-47.3.0'

    implementation fg.deobf("mezz.jei:jei-1.20.1-forge:15.2.0.23")
    implementation('org.spongepowered:mixin:0.8.7') {
        transitive = false
        exclude group: 'net.minecraftforge', module: 'forge'
    }
    annotationProcessor "org.spongepowered:mixin:0.8.7:processor"
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    implementation fg.deobf("curse.maven:the-one-probe-245211:4579432")

    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")

    compileOnly fg.deobf('curse.maven:cc-tweaked-282001:4823493')

    implementation fg.deobf('curse.maven:journeymap-32274:5208416')


//     Mekanism dependencies
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}")
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:generators")
    implementation fg.deobf("mekanism:Mekanism:${mekanism_version}:tools")
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}:additions")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "creategeography",
                "Specification-Vendor"    : "adonis",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "adonis",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    // 确保包含所有必要的资源
    from sourceSets.main.output
    // 包含 META-INF
    include 'META-INF/**'
    // 包含所有的类文件
    include 'com/adonis/**'
}

// 确保重新混淆
jar.finalizedBy('reobfJar')
// ... existing code ...

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        def mavenURL = System.getProperty("mavenDir")
        if ("${mavenURL}" != "null") {
            maven {
                url = file(mavenURL)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

mixin {
    add sourceSets.main, "creategeography.mixins.refmap.json"
    config "creategeography.mixins.json"
}

configurations.configureEach {
    resolutionStrategy {
        force 'org.spongepowered:mixin:0.8.7'
    }
}